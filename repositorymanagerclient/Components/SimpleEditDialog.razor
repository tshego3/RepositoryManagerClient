@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using System.ComponentModel
@typeparam T
@implements IDialogContentComponent<T>

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.Attach())" />
        <FluentLabel Style="width: 100%" Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <EditForm EditContext="@_editContext" FormName="simple_register">
        <DataAnnotationsValidator />

        @foreach (var prop in typeof(T).GetProperties())
        {
            string propValue = (string)prop.GetValue(Content)!;
            if (prop.Name.Equals("Id").Equals(true))
            {
                <FluentLabel Style="margin-bottom: 
                                    16px; 
                                    width: 100%"
                >
                    @string.Concat(Shared.ComponentHandlers.GetAttributeDisplayName(prop), ": ", propValue)
                </FluentLabel>
            }
            else
            {
                <FluentTextField Name="@prop.Name"
                                 @bind-Value="propValue"
                                 Label="@string.Concat(Shared.ComponentHandlers.GetAttributeDisplayName(prop), ": ")"
                                 Style="width: 100%" />
            }
        }

        <div style="color: var(--error);">
            <FluentValidationSummary />
        </div>
    </EditForm>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent"
                  Disabled="@(!_editContext.Validate())"
                  OnClick="@SaveAsync">
        Save
    </FluentButton>
    <FluentButton Appearance="Appearance.Neutral"
                  OnClick="@CancelAsync">
        Cancel
    </FluentButton>
</FluentDialogFooter>

@code
{
    private EditContext _editContext = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public T Content { get; set; } = default!;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Content!);
    }

    private async Task SaveAsync()
    {
        if (_editContext.Validate())
        {
            await Dialog.CloseAsync(Content);
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }
}
