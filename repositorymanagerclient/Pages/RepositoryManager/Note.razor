@page "/repositorymanager/note"

@using Microsoft.FluentUI.AspNetCore.Components
@using System.Diagnostics
@using repositorymanagerclient.Components
@using repositorymanagerclient.Shared

@inject IDialogService DialogService
@inject HttpClient Http
@inject IConfiguration Configuration
@inject ILogger<Nexuse> Logger
@inject NavigationManager NavManager

@if (notes == null)
{
    <FluentProgressRing></FluentProgressRing>
}
else
{
    <div style="height: auto; overflow:auto;" tabindex="-1">
        <FluentDataGrid Items="@FilteredItems"
                        ResizableColumns=true
                        Pagination="@pagination"
                        GenerateHeader="GenerateHeaderOption.Sticky"
                        TGridItem="Models.RepositoryManager.Note"
                        OnRowFocus="@(args => ComponentHandlers.HandleRowFocus<Models.RepositoryManager.Note>(args))"
                        GridTemplateColumns="0.2fr 1fr 0.2fr 0.2fr"
                        Style="height: auto; overflow:auto;"
                        ShowHover="true">
            <PropertyColumn Property="@(c => c!.Id)" />
            <PropertyColumn Property="@(c => c!.NoteValue)" InitialSortDirection=SortDirection.Descending Sortable="true" IsDefaultSortColumn=true Comparer="@ComponentHandlers.StringLengthComparer.Instance">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch type="search" Autofocus=true @bind-Value=noteFilter @oninput="@(args => ComponentHandlers.HandleFilter(args, out noteFilter))" AfterBindValue="@(() => ComponentHandlers.HandleClear(noteFilter, out noteFilter))" Placeholder="Search..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <TemplateColumn Title="Actions" Align="@Align.End">
                <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(async () => await EditAsync(context))" />
                <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(async () => await EditAsync(context))" />
            </TemplateColumn>
        </FluentDataGrid>

        <FluentPaginator State="@pagination">
            <SummaryTemplate>
                There are <strong>@(pagination.TotalItemCount ?? 0)</strong> rows
            </SummaryTemplate>
            <PaginationTextTemplate>
                This is page <strong>@(pagination.CurrentPageIndex + 1)</strong> out of a total of <strong>@(pagination.LastPageIndex + 1)</strong> pages
            </PaginationTextTemplate>
        </FluentPaginator>
    </div>
}

@code {
    private IQueryable<Models.RepositoryManager.Note> notes = default!;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 15 };
    private string noteFilter = string.Empty!;

    private IQueryable<Models.RepositoryManager.Note> FilteredItems => notes.Where(x => x.NoteValue.Contains(noteFilter, StringComparison.CurrentCultureIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        notes = (await WebRequests.GetAsync<Models.RepositoryManager.Note[]>(Enums.WebRequestEndpoint.RepositoryManagerNote, Logger, Configuration)).AsQueryable();
    }

    private async Task EditAsync(Models.RepositoryManager.Note noteContext)
    {
        Models.RepositoryManager.Note note = noteContext;

        var dialog = await DialogService.ShowDialogAsync<SimpleEditDialog<Models.RepositoryManager.Note>>(note, new DialogParameters()
            {
                Height = "auto",
                Width = "50vw",
                Title = note.NoteValue,
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            note = (Models.RepositoryManager.Note)result.Data;
        }

    }
}
