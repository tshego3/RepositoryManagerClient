@page "/repositorymanager/nexuse"

@using Microsoft.FluentUI.AspNetCore.Components
@using System.Diagnostics
@using repositorymanagerclient.Shared

@inject HttpClient Http
@inject IConfiguration Configuration
@inject ILogger<Nexuse> Logger
@inject NavigationManager NavManager

@if (nexuses == null)
{
    <FluentProgressRing></FluentProgressRing>
}
else
{
    <div style="height: auto; overflow:auto;" tabindex="-1">
        <FluentDataGrid Items="@FilteredItems"
                ResizableColumns=true
                Pagination="@pagination"
                Virtualize="true"
                GenerateHeader="GenerateHeaderOption.Sticky"
                TGridItem="Models.RepositoryManager.Nexuse"
                OnRowFocus="@(args => ComponentHandlers.HandleRowFocus<Models.RepositoryManager.Nexuse>(args))"
                GridTemplateColumns="0.2fr 1fr 0.2fr 0.2fr"
                Style="height: auto; overflow:auto;"
                ShowHover="true">
            <PropertyColumn Title="ID" Property="@(c => c!.Id)" />
            <PropertyColumn Title="Nexuse" Property="@(c => c!.NexuseValue)" InitialSortDirection=SortDirection.Descending Sortable="true" IsDefaultSortColumn=true Comparer="@ComponentHandlers.StringLengthComparer.Instance">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch type="search" Autofocus=true @bind-Value=nexuseFilter @oninput="@(args => ComponentHandlers.HandleFilter(args, out nexuseFilter))" AfterBindValue="@(() => ComponentHandlers.HandleClear(nexuseFilter, out nexuseFilter))" Placeholder="Nexuse..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Title="Raw Nexuse" Property="@(c => c!.RawNexuse)" />
            <TemplateColumn Title="Actions" Align="@Align.End">
                <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => Debug.WriteLine("Delete clicked"))" />
                <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => Debug.WriteLine("Delete clicked"))" />
            </TemplateColumn>
        </FluentDataGrid>

        <FluentPaginator State="@pagination">
            <SummaryTemplate>
                There are <strong>@(pagination.TotalItemCount ?? 0)</strong> rows
            </SummaryTemplate>
            <PaginationTextTemplate>
                This is page <strong>@(pagination.CurrentPageIndex + 1)</strong> out of a total of <strong>@(pagination.LastPageIndex + 1)</strong> pages
            </PaginationTextTemplate>
        </FluentPaginator>
    </div>
}

@code {
    private IQueryable<Models.RepositoryManager.Nexuse> nexuses = default!;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 25 };
    private GridItemsProvider<Models.RepositoryManager.Nexuse> nexuseProvider = default!;
    private int numResults = default;
    private string nexuseFilter = string.Empty!;

    private IQueryable<Models.RepositoryManager.Nexuse> FilteredItems => nexuses.Where(x => x.NexuseValue.Contains(nexuseFilter, StringComparison.CurrentCultureIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        nexuses = (await WebRequests.GetAsync<Models.RepositoryManager.Nexuse[]>(Enums.WebRequestEndpoint.RepositoryManagerNexuse, Logger, Configuration)).AsQueryable();
    }
}
